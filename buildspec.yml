version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: "ap-northeast-2"  # 서울 리전
    EKS_CLUSTER_NAME: "group01-autosacling-cluster-01"
    IMAGE_REPO_NAME: "snet-flutter-web"
    IMAGE_TAG: "latest"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      # Flutter 설치
      - echo "Flutter 설치 시작..."
      - git clone https://github.com/flutter/flutter.git /flutter
      - export PATH="$PATH:/flutter/bin"
      - flutter doctor --disable-analytics
      - flutter config --enable-web --no-analytics
      
      # eksctl 설치 (EKS 관리 도구)
      - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
      - mv /tmp/eksctl /usr/local/bin
      
      # Helm 설치 (패키지 매니저)
      - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
  pre_build:
    commands:
      # ECR 로그인
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 236528210774.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      
      # ECR 리포지토리 생성 (없는 경우)
      - aws ecr describe-repositories --repository-names $IMAGE_REPO_NAME || aws ecr create-repository --repository-name $IMAGE_REPO_NAME
      
  build:
    commands:
      # Docker 이미지 빌드 (Flutter 빌드는 Docker 내부에서 처리)
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -f Dockerfile.web -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG 236528210774.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      
  post_build:
    commands:
      # ECR에 이미지 푸시
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push 236528210774.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      
      # EKS 배포
      - echo Deploying to EKS...
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME
      - echo "Adding CodeBuild role to EKS cluster auth..."
      - eksctl create iamidentitymapping --cluster $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION --arn arn:aws:iam::236528210774:role/codebuild-snet05_group01webbeta01-service-role --group system:masters --username codebuild-service-role || echo "Role mapping already exists"
      
      # AWS Load Balancer Controller 설치 (기존 설정 재사용)
      - echo "Setting up AWS Load Balancer Controller..."
      - echo "OIDC provider and ServiceAccount setup skipped - using existing configuration"
      
      # Helm으로 ALB Controller 설치
      - echo "Installing AWS Load Balancer Controller via Helm..."
      - helm repo add eks https://aws.github.io/eks-charts || echo "Helm repo already added"
      - helm repo update
      - helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=$EKS_CLUSTER_NAME --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=$AWS_DEFAULT_REGION --set vpcId=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text) || echo "ALB Controller already installed"
      
      # 클러스터 노드 상태 확인
      - echo "Checking cluster nodes and resources..."
      - kubectl get nodes -o wide
      - kubectl top nodes || echo "Metrics server not available"
      - kubectl describe nodes | grep -A 5 "Allocated resources" || echo "Node resource info not available"
      
      # ALB Controller 문제 진단
      - echo "Diagnosing ALB Controller issues..."
      - kubectl get pods -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system -o wide
      - kubectl describe pods -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system || echo "Cannot describe ALB Controller pods"
      
      # ALB Controller가 스케줄링되지 않는 경우 강제 삭제 후 재설치
      - echo "Checking if ALB Controller pods are stuck in Pending..."
      - PENDING_PODS=$(kubectl get pods -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system --field-selector=status.phase=Pending --no-headers | wc -l)
      - if [ "$PENDING_PODS" -gt 0 ]; then echo "Found $PENDING_PODS pending ALB Controller pods, restarting..."; kubectl delete pods -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system --force --grace-period=0; sleep 30; fi
      
      # ALB Controller 재시작 후 상태 확인
      - echo "Waiting for ALB Controller to be ready (reduced timeout)..."
      - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system --timeout=300s || echo "ALB Controller still not ready, proceeding anyway..."
      
      # Webhook 서비스 상태 최종 확인
      - echo "Final webhook service check..."
      - kubectl get svc aws-load-balancer-webhook-service -n kube-system || echo "Webhook service not found"
      - kubectl get endpoints aws-load-balancer-webhook-service -n kube-system || echo "Webhook endpoints not found"
      
      # News API 이미지 풀
      - echo "Pulling News API image..."
      - docker pull yulee0461/news-api:latest
      
      # Deployment 적용 (ALB Controller 없이도 기본 리소스는 생성)
      - echo "Applying Kubernetes deployment..."
      - kubectl apply -f k8s/deployment.yaml --validate=false
      
      # HPA 적용 (자동 스케일링)
      - echo "Applying HPA configuration..."
      - kubectl apply -f k8s/hpa.yaml --validate=false
      
      # Deployment 상태 확인 (더 자세한 정보)
      - echo "Checking deployment status..."
      - kubectl get deployment snet-news-app -o wide
      - kubectl describe deployment snet-news-app
      - kubectl get pods -l app=snet-news-app -o wide
      
      # Pod가 생성되지 않는 경우 ReplicaSet 확인
      - kubectl get replicasets -l app=snet-news-app
      - kubectl describe replicasets -l app=snet-news-app
      
      # Rollout 상태 확인 (더 긴 타임아웃)
      - echo "Waiting for deployment rollout..."
      - kubectl rollout status deployment/snet-news-app --timeout=600s || echo "Deployment rollout timeout, checking status..."
      
      # 실패 시 상세 정보 출력
      - kubectl get events --sort-by='.lastTimestamp' | tail -20
      - kubectl logs -l app=snet-news-app --tail=10 || echo "No app logs available yet"

artifacts:
  files:
    - '**/*'